import {GetStaticProps} from "next";import axios from "axios";import {ChangeEventHandler, useEffect, useRef, useState} from "react";import Highcharts, {SeriesOptionsType, SeriesXrangeOptions, XrangePointOptionsObject} from "highcharts";import HighchartsReact from "highcharts-react-official";import styles from  "../styles/index.module.css";import { notFound } from 'next/navigation'type populationValue = {  year: string;  value: number;  rate?: number;}type fetchData = {  prefCode: number;  prefName: string;  data: {    label: string;    data: populationValue[];  }[];}type HomeProps = {  data: fetchData[];  notFound?: boolean;}export default function Home({data, notFound}: HomeProps) {  useEffect(() => {    if(notFound){      alert("APIからのデータ取得に失敗しました")    }  }, []);  const [test, setTest] = useState(0);  const [options, setOptions] = useState<Highcharts.Options>({    title: {      text: '都道府県別総人口'    },    plotOptions: {      series: {        label: {          connectorAllowed: false,        },        pointInterval: 5,        pointStart: 1965      }    },    series: [],  });  const onChangePrefecture: ChangeEventHandler<HTMLInputElement> = async (ev) => {    const targetValue = ev.target.value.split(",");    //チェックボックスがオンにされた場合、オンにされた都道府県のデータをoptionステイトに追加する    if(ev.target.checked){      const newSeries: SeriesOptionsType[] = options.series as SeriesOptionsType[];      const newData: XrangePointOptionsObject[] = [];      const selectedPrefecture = data.filter(v => v.prefCode === Number(targetValue[0]));      selectedPrefecture[0].data[0].data.forEach((targetData: any) => {        newData.push(targetData.value)      });      newSeries.push(          {name: targetValue[1],            data: newData,          } as SeriesOptionsType      );    setOptions({... options, series: newSeries})    }    //オフにされた場合オフにされた都道府県のデータを削除する    else{      setOptions({...options, series: options.series?.filter(value => value.name !== targetValue[1])});    }  }  return (    <div className={styles.container}>      <h2　className={styles.title}>都道府県別総人口グラフ</h2>      <div className={styles.checkbox}>        {data.map((prefecture, index) => {          return(              <div className={styles.checkboxItem} key={index}>                <input type="checkbox" value={prefecture.prefCode + "," + prefecture.prefName} onChange={onChangePrefecture} id={prefecture.prefName}/>                <label className={styles.checkboxText} htmlFor={prefecture.prefName}>{prefecture.prefName}</label>              </div>          )        })}      </div>      <div className={styles.chart}>        <HighchartsReact            allowChartUpdate={true}            highcharts={Highcharts}            options={options}        />      </div>    </div>  )}export const getStaticProps: GetStaticProps = async () => {  //返すデータを定義  const data: fetchData[] = [];  try{    // 都道府県一覧を取得    const resPrefecture = await axios.get(      `https://opendata.resas-portal.go.jp/api/v1/prefectures`, {        headers: {'X-API-KEY': process.env.RESAS_API_KEY}      });    //各都道府県の人口データを取得して配列に格納    for (const prefecture of resPrefecture.data.result) {      const resPerYear = await axios.get(        `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear`, {          params: {prefCode: prefecture.prefCode, cityCode: "-"},          headers: {'X-API-KEY': process.env.RESAS_API_KEY}        });      data.push({        prefCode: prefecture.prefCode,        prefName: prefecture.prefName,        data: resPerYear.data.result.data      })    }  }  catch (error){    return {      props: { data: {}, notFound: true, error }    }  }  if (!data) {    return {      props: {data: {}, notFound: true}    };  }  return {    props: {data},  };};